**app.py:
from scripts.sentinel import resolute
from flask import Flask, render_template, request, jsonify, send_from_directory
import sqlite3
import os

app = Flask(__name__, static_folder='')

# Get the absolute path to the database file
database_path = os.path.join(app.root_path, 'data', 'legion_scores.db')

# Initialize the database with nine legions if it's empty
def initialize_database():
    db = sqlite3.connect(database_path)
    cursor = db.cursor()
    cursor.execute("SELECT count(*) FROM scores")
    result = cursor.fetchone()
    count = result[0] if result else 0
    if count == 0:
        for legion_num in range(1, 10):
            cursor.execute("INSERT INTO scores (legion_name, score) VALUES (?, ?)", (f"Legion {legion_num}", 0))
        db.commit()
    db.close()

@app.route('/')
def index():
    return send_from_directory('.', 'index.html')

@app.route('/submit', methods=['POST'])
def submit():
    cac = request.form['cac']
    aok = request.form['aok']

    db = sqlite3.connect(database_path)
    cursor = db.cursor()

    # Update the score in the database
    user_legion = resolute(cac)
    cursor.execute("SELECT score FROM scores WHERE legion_name = ?", (f"Legion {user_legion}",))
    result = cursor.fetchone()
    score = result[0] if result else 0
    new_score = score + (1 if aok.lower() == 'yes' else 0)
    cursor.execute("UPDATE scores SET score = ? WHERE legion_name = ?", (new_score, f"Legion {user_legion}"))
    db.commit()

    db.close()

    return '', 204

@app.route('/legion-scores')
def get_legion_scores():
    db = sqlite3.connect(database_path)
    cursor = db.cursor()

    # Fetch the scores for the nine legions
    cursor.execute("SELECT * FROM scores WHERE legion_name LIKE 'Legion %' ORDER BY legion_name")
    results = cursor.fetchall()

    # Convert the results into a list of dictionaries
    scores = []
    for row in results:
        legion_name, score, date = row
        scores.append({
            'legion_name': legion_name,
            'score': score,
            'date': date
        })

    db.close()

    return jsonify(scores)

if __name__ == '__main__':
    initialize_database()
    app.run()

**index.html:
<!DOCTYPE html>
<html>
<head>
    <link rel="icon" href="/fe.ico" type="image/x-icon">
    <title>FLOWER Economics</title>
    <style>
        body {
            background-color: limegreen;
            margin: 0;
            padding: 0;
            margin-left: 10px;
        }
        
        .navbar {
            background-color: limegreen;
            height: 50px;
            display: flex;
            align-items: center;
            padding-right: 100px;
            margin-top: 10px;
            margin-right: 100px;
        }
        
        .navbar ul {
            list-style-type: none;
            margin: 0;
            padding: 0;
            display: flex;
            margin-left: auto;
        }
        
        .navbar li {
            margin-right: 20px;
        }
        
        .navbar a {
            color: white;
            font-size: 16px;
            text-decoration: none;
            padding: 15px;
            display: block;
        }
        
        .navbar a:hover {
            background-color: DarkGreen;
        }
        
        .dropdown-content {
            display: none;
            position: absolute;
            background-color: LimeGreen;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
        }
        
        .dropdown-content a {
            color: white;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            font-size: 14px;
        }
        
        .dropdown:hover .dropdown-content {
            display: block;
        }
        
        .dropdown:hover > a {
            background-color: DarkGreen;
            padding-bottom: 17px;
        }
        
        /* Additional styling */
        p {
            margin-bottom: 0.5em;
        }
        
        ul {
            margin-top: 0.5em;
            margin-bottom: 0.5em;
        }
        
        /* Added styling for the logo */
        .logo {
            display: flex;
            align-items: center;
            margin-right: 20px;
            margin-left: 0;
        }
        
        .logo img {
            height: 40px;
            width: auto;
        }

        /* Added styling for the image */
        .image-container {
            position: absolute;
            bottom: 90px;
            right: 150px;
        }
        
        .image-container img {
            height: 350px;
            width: auto;
        }

        .caption {
            margin-top: 5px; /* Adjust this value to reduce or increase the distance */
        }

        .credit {
            margin-top: 5px; /* Adjust this value to reduce or increase the distance */
        }
    </style>
</head>
<body>
    <div class="navbar">
        <div class="logo">
            <img src="static/fe.png" alt="Logo">
        </div>
        <ul>
            <li><a href="{{ url_for('index') }}">Home</a></li>
            <li><a href="https://paypal.me/SalmanShuaib" target="_blank">Sponsor</a></li>
            <li><a href="contact.html">Contact</a></li>
            <li><a href="about.html">About</a></li>
            <li class="dropdown">
                <a href="#">Legalities</a>
                <div class="dropdown-content">
                    <a href="#">Disclaimer</a>
                    <a href="#">Privacy Policy</a>
                    <a href="#">Terms And Conditions</a>
                </div>
            </li>
        </ul>
    </div>

    <div style="height: 800px;">
        <h1 style="color: brown; margin-bottom: 0;">sentinel</h1>
        <label for="cac-input">Enter your City Area Code, e.g. 416 for Toronto:</label><br>
        <input type="text" id="cac-input"><br><br><br>
        <label for="aok-input">Report an Act Of Kindness by you via typing "yes":</label><br>
        <input type="text" id="aok-input">
        <button id="submit-button">Submit</button>
        <div id="score-label"></div>
        <table id="legion-scores">
            <thead>
                <tr>
                    <th>Legion Name</th>
                    <th>Score</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
        <div class="image-container">
            <img src="static/dreamstime_s_138875124.jpg" alt="Image">
            <p class="caption">We need an economic model to mutually escape poverty!</p>
            <p class="credit">ID 138875124 Â© Enjoys | Dreamstime.com</p>
        </div>
    </div>
    <script src="static/sentinel.js"></script>
    <script>
        // JavaScript equivalent of resolute function
        function resolute(phNum) {
            let digits = Array.from(String(phNum), Number);
            while (digits.length > 1) {
                digits = Array.from(String(digits.reduce((a, b) => a + b)), Number);
            }
            return digits[0];
        }

        // Create an instance of the SentinelWebApp class and run it
        const app = new SentinelWebApp();
        app.run();
    </script>
</body>
</html>

**sentinel.py:
import requests
import tkinter as tk

# Function to calculate Legion Number based on CAC
def resolute(phNum):
    digits = [int(char) for char in str(phNum) if char.isdigit()]
    if not digits:
        return 0
    while len(digits) > 1:
        digits = [int(char) for char in str(sum(digits))]
    return digits[0]


class SentinelApp:
    def __init__(self):
        self.cac = ""
        self.act = False
        self.initialize()

    def initialize(self):
        # Create the GUI window
        root = tk.Tk()
        root.title("Sentinel App")

        # Function to handle the submit button click event
        def submit_form():
            cac = cac_entry.get()
            self.handleCACInput(cac)

            aok = aok_entry.get()
            self.handleAOKInput(aok)

            # Perform the necessary calculations and update the database using Flask's endpoint
            url = 'http://localhost:5000/submit'
            data = {'cac': self.cac, 'aok': 'yes' if self.act else 'no'}
            response = requests.post(url, data=data)

            # Clear the input fields
            cac_entry.delete(0, tk.END)
            aok_entry.delete(0, tk.END)

        # Create and position the input fields
        cac_label = tk.Label(root, text="Enter your City Area Code, e.g. 416 for Toronto:")
        cac_label.pack()
        cac_entry = tk.Entry(root)
        cac_entry.pack()

        aok_label = tk.Label(root, text='Report an Act Of Kindness by you via typing "yes":')
        aok_label.pack()
        aok_entry = tk.Entry(root)
        aok_entry.pack()

        # Create and position the submit button
        submit_button = tk.Button(root, text="Submit", command=submit_form)
        submit_button.pack()

        # Run the GUI main loop
        root.mainloop()

    def handleCACInput(self, input):
        self.cac = input.strip()

    def handleAOKInput(self, input):
        self.act = input.strip().lower() == "yes"

if __name__ == "__main__":
    app = SentinelApp()

**sentinel.js:
// JavaScript equivalent of resolute function
function resolute(phNum) {
  let digits = Array.from(String(phNum), Number);
  while (digits.length > 1) {
    digits = Array.from(String(digits.reduce((a, b) => a + b)), Number);
  }
  return digits[0];
}

class SentinelWebApp {
  constructor() {
    this.cac = "";
    this.act = false;
    this.results = null;
    this.winningLegions = [];
    this.initialize();
  }

  initialize() {
    this.winningLegions = [];
    this.getLegionScores();
  }

  getLegionScores() {
    const url = "/legion-scores"; // Update the URL to the Flask endpoint that returns the scores
    fetch(url)
      .then((response) => response.json())
      .then((data) => {
        this.results = data;
        this.updateLegionScores();
      })
      .catch((error) => {
        console.log("Error fetching Legion scores:", error);
      });
  }

  updateLegionScores() {
    const tableBody = document.querySelector("#legion-scores tbody");
    tableBody.innerHTML = ""; // Clear the table body before updating

    for (const legion of this.results) {
      const row = document.createElement("tr");
      const nameCell = document.createElement("td");
      const scoreCell = document.createElement("td");
      const dateCell = document.createElement("td");

      nameCell.textContent = legion.legion_name;
      scoreCell.textContent = legion.score;
      dateCell.textContent = legion.date;

      row.appendChild(nameCell);
      row.appendChild(scoreCell);
      row.appendChild(dateCell);

      tableBody.appendChild(row);
    }
  }

  handleCACInput(input) {
    this.cac = input.trim();
  }

  handleAOKInput(input) {
    this.act = input.trim().toLowerCase() === "yes";
  }

  submitForm() {
    const cacInput = document.getElementById("cac-input");
    const aokInput = document.getElementById("aok-input");
    this.handleCACInput(cacInput.value);
    this.handleAOKInput(aokInput.value);

    // Perform the necessary calculations and update the database using Flask's endpoint
    const url = "http://localhost:5000/submit";
    const params = new URLSearchParams();
    params.append("cac", this.cac);
    params.append("aok", this.act ? "yes" : "no");

    fetch(url, {
      method: "POST",
      body: params,
    })
      .then(() => {
        // Clear the input fields
        cacInput.value = "";
        aokInput.value = "";

        // Update the Legion scores after submitting the form
        this.getLegionScores();
      })
      .catch((error) => {
        console.log("Error submitting form:", error);
      });
  }


  getLegionScoresText() {
    let scoresText = "Legion Scores:\n";
    if (Array.isArray(this.results)) {
      for (const legion of this.results) {
        scoresText += `${legion.legion_name}: ${legion.score}\n`;
      }
    }
    return scoresText;
  }

  run() {
    // Function to handle the submit button click event
    const submitForm = () => {
      this.submitForm();
    };

    // Add event listener to submit button
    const submitButton = document.getElementById("submit-button");
    submitButton.addEventListener("click", submitForm);

    // Fetch and display the Legion scores
    this.getLegionScores();
  }
}

