***Codebase:

**legion-ticker.php:-
<?php
/*
Plugin Name: Legion Ticker
Description: Displays a ticker on top of the site showing penalties for each legion.
Version: 1.0.0
Delicensed: CC0 1.0 Universal by Salman SHUAIB, in honor of Taylor Swift
*/
function legion_ticker_enqueue_scripts() {
    wp_enqueue_style('legion-ticker-css', plugins_url('legion-ticker.css', __FILE__));
    wp_enqueue_script('jquery');
}
add_action('wp_enqueue_scripts', 'legion_ticker_enqueue_scripts');


function display_ticker() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'league';
    $results = $wpdb->get_results("SELECT * FROM $table_name ORDER BY Score ASC");
    $colors = ["#FF0000", "#00FF00", "#0000FF", "#FFFF00", "#FF00FF", "#00FFFF", "#C0C0C0", "#808080", "#800000"];

    if ($results) {
        echo '<div class="ticker-wrapper">';
        foreach ($results as $index => $result) {
            $color = $colors[$result->{"Legion Number"} - 1];
            echo '<span class="ticker-item" style="background-color:' . $color . ';">Legion ' . $result->{"Legion Number"} . ': ' . $result->Score . '</span>';
        }
        echo '</div>';
    } else {
        echo "No records found in the league table.";
    }
}
add_action('wp_head', 'display_ticker');

function legion_ticker_animation_script() {
    ?>
    <script type="text/javascript">
        jQuery(document).ready(function($) {
            let $ticker = $('.ticker-wrapper');
            let tickerWidth = $ticker.width();
            $ticker.css('left', tickerWidth);
            setInterval(function() {
                let left = parseInt($ticker.css('left'));
                if (left <= -tickerWidth) {
                    $ticker.css('left', tickerWidth);
                } else {
                    $ticker.css('left', left - 1 + 'px');
                }
            }, 50);
        });
    </script>
    <?php
}
add_action('wp_footer', 'legion_ticker_animation_script');

**my-webhooks.php:-
<?php
/*
Plugin Name: My Webhooks
Description: Custom plugin to handle incoming webhooks from Mobilephones.
Requisites: "WP REST API" plugin and "League Table Grid" plugin.
Version: 0.0.9
Delicensed: CC0 1.0 Universal by Salman SHUAIB
*/

include 'CitiesBank.php';
$areaCodeToCity = array_flip($cityAreaCodes);  // Reverse the array for lookup

if (!function_exists('resolute')) {
    function resolute($phNum) {
        $digits = str_split($phNum);
        while (count($digits) > 1) {
            $digits = str_split(array_sum($digits));
        }
        return intval($digits[0]);
    }
}

// Webhook handler function
if (!function_exists('handle_webhook_request')) {
    function handle_webhook_request(WP_REST_Request $request) {
        global $areaCodeToCity;

        // Extract the necessary information from the request headers
        $from_number = $request->get_header('FromNumber');
        $text = $request->get_header('text');
        $TICKET = $request->get_header('DatePersonal');

        $legion_num = resolute($from_number);

        // Extract the area code from the phone number
        $areaCode = substr($from_number, 0, 3);  // Assuming the area code is the first three digits

        $baseCity = $areaCodeToCity[$areaCode] ?? "{Tag: BASECITY}";  // Check if the area code exists, else default

        update_option('legion_number', $legion_num);       
        // Perform actions based on the webhook data
        // Create a new post with the received data
        $post_data = array(
            'post_title'   => $baseCity . ' ' . $TICKET,
            'post_content' => $text,   
            'post_status'  => 'publish',
            'post_author'  => 2, 
            //'post_category' => $sub_category
        );

        $post_id = wp_insert_post($post_data);
        
        global $wpdb;    //Displays unique Legion numbers
        $wpdb->update(
            $wpdb->posts,
            array(
                'legion_number' => $legion_num  
            ),
            array('ID' => $post_id) 
        );
        
        
        // Check for duplicates and trash if necessary
        do_action('interdict_check_duplicate', $post_id, $from_number);

        // Send a response if necessary
        if ($post_id) {
            // Post created successfully
            return new WP_REST_Response('Post created', 200);
        } else {
            // Error occurred while creating the post
            return new WP_REST_Response('Error creating post', 500);
        }
    }
}

// Register the custom webhook route
function register_custom_webhook_route() {
    register_rest_route('my-webhooks/v1', '/webhook/text', array(
        'methods' => 'POST',
        'callback' => 'handle_webhook_request',
    ));
}

// Ensure the callback to register_custom_webhook_route is being run
add_action('rest_api_init', 'register_custom_webhook_route');
?>