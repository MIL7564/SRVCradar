***Codebase:

**AndroidManifest.xml:-
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.READ_SMS" />
    <uses-permission android:name="android.permission.RECEIVE_SMS" />

    <uses-feature android:name="android.hardware.telephony" android:required="false" />
    <uses-feature android:name="android.hardware.faketouch" android:required="false" />

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Retriever"
        tools:targetApi="33">

        <service android:name=".MessageMonitoringService" android:exported="false"/>
        <receiver android:name=".SMSReceiver" android:exported="true" android:permission="android.permission.BROADCAST_SMS">
            <intent-filter>
                <action android:name="android.provider.Telephony.SMS_RECEIVED" />
            </intent-filter>
        </receiver>

        <activity android:name=".MainActivity" android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <!-- Other elements in the manifest file -->

    </application>

</manifest>

**MainActivity.java:-
package com.text.retriever;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

public class MainActivity extends AppCompatActivity {

    private static final int SMS_PERMISSION_CODE = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (!hasSmsPermission()) {
            requestSmsPermission();
        } else {
            startMessageMonitoringService();
        }
    }

    private boolean hasSmsPermission() {
        return ContextCompat.checkSelfPermission(this, Manifest.permission.READ_SMS) == PackageManager.PERMISSION_GRANTED
                && ContextCompat.checkSelfPermission(this, Manifest.permission.RECEIVE_SMS) == PackageManager.PERMISSION_GRANTED;
    }

    private void requestSmsPermission() {
        ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_SMS, Manifest.permission.RECEIVE_SMS}, SMS_PERMISSION_CODE);
    }

    private void startMessageMonitoringService() {
        Intent intent = new Intent(this, MessageMonitoringService.class);
        startService(intent);
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        if (requestCode == SMS_PERMISSION_CODE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                startMessageMonitoringService();
            }
        }
    }
}

**MessageMonitoringService.java:-
package com.text.retriever;

import android.app.Service;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.IBinder;

public class MessageMonitoringService extends Service {

    private SMSReceiver yourBroadcastReceiver;

    @Override
    public void onCreate() {
        super.onCreate();
        // Perform initialization tasks here
        yourBroadcastReceiver = new SMSReceiver();
        IntentFilter intentFilter = new IntentFilter("android.provider.Telephony.SMS_RECEIVED");
        registerReceiver(yourBroadcastReceiver, intentFilter);
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        // Perform tasks when the service starts here
        return Service.START_STICKY;
    }

    @Override
    public IBinder onBind(Intent intent) {
        // Return null for a simple Service
        return null;
    }

    @Override
    public void onDestroy() {
        // Perform cleanup tasks here
        super.onDestroy();
        unregisterReceiver(yourBroadcastReceiver);
    }
}

**SMSReceiver.java:-
package com.text.retriever;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.telephony.SmsMessage;
import android.util.Log;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.json.JSONObject;

import java.util.concurrent.TimeUnit;

public class SMSReceiver extends BroadcastReceiver {
    private static final String TAG = "SMSReceiver";
    private OkHttpClient client;
    private static final String WEBHOOK_URL = "https://FlowerEconomics.com/wp-json/my-webhooks/v1/webhook/text";  // replace this with your actual URL
    private static final MediaType JSON = MediaType.get("application/json; charset=utf-8");

    public SMSReceiver() {
        this.client = new OkHttpClient.Builder()
                .connectTimeout(20, TimeUnit.SECONDS)
                .readTimeout(20, TimeUnit.SECONDS)
                .build();
    }

    @Override
    public void onReceive(Context context, Intent intent) {
        if ("android.provider.Telephony.SMS_RECEIVED".equals(intent.getAction())) {
            Bundle extras = intent.getExtras();
            if (extras != null) {
                Object[] pdus = (Object[]) extras.get("pdus");
                if (pdus != null && pdus.length > 0) {
                    SmsMessage[] messages = new SmsMessage[pdus.length];
                    for (int i = 0; i < pdus.length; i++) {
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                            String format = extras.getString("format");
                            messages[i] = SmsMessage.createFromPdu((byte[]) pdus[i], format);
                        } else {
                            messages[i] = SmsMessage.createFromPdu((byte[]) pdus[i]);
                        }
                    }

                    // Extract necessary information from the messages
                    String messageBody = messages[0].getMessageBody();
                    String sender = messages[0].getOriginatingAddress();

                    // Convert the message body and keywords to lowercase for case-insensitive comparison
                    String lowerCaseMessageBody = messageBody.toLowerCase();
                    String keyword1 = "cellnet";
                    String keyword2 = "opa";

                    if (lowerCaseMessageBody.contains(keyword1) && lowerCaseMessageBody.contains(keyword2)) {
                        // Keywords "cellnet" and "opa" (case-insensitive) found in the message
                        // Log the entire message and sender's number (second, third, and fourth digits)
                        Log.i(TAG, "SMS contained the word 'cellnet' and 'opa': " + messageBody);
                        if (sender != null && sender.length() > 4) {
                            Log.i(TAG, "Sender's number, digits 2-4: " + sender.substring(1, 4));
                            // Trigger the webhook asynchronously using AsyncTask
                            new WebhookAsyncTask().execute(messageBody, sender.substring(1, 4));
                        } else {
                            Log.w(TAG, "Sender's number is not long enough to extract digits 2-4");
                        }
                    }
                }
            }
        }
    }

    private class WebhookAsyncTask extends AsyncTask<String, Void, Void> {
        @Override
        protected Void doInBackground(String... params) {
            String messageBody = params[0];
            String fromNumber = params[1];

            try {
                JSONObject payload = new JSONObject();
                payload.put("text", messageBody);
                payload.put("FromNumber", fromNumber);
                payload.put("OccurredAt", System.currentTimeMillis());

                RequestBody body = RequestBody.create(payload.toString(), JSON);
                Request request = new Request.Builder()
                        .url(WEBHOOK_URL)
                        .post(body)
                        .addHeader("Content-Type", "application/json")
                        .build();

                // Execute the request
                Response response = client.newCall(request).execute();

                Log.i(TAG, "Webhook response: " + response.body().string());
            } catch (Exception e) {
                Log.e(TAG, "Error in sending request", e);
            }

            return null;
        }
    }
}

**league-table-grid.php:-
<?php
/*
Plugin Name: League Table Grid
Description: Plugin to display the league table in a grid - solves freeridership.
Version: 0.0.9
Delicensed via Creative Commons Zero v1.0 Universal by: Salman SHUAIB.
*/


function insert_initial_records() {
  global $wpdb;
  
  // Retrieve the database name from the WordPress configuration file
  $database_name = $wpdb->dbname;
  
  // Get the table name with the correct prefix
  $table_name = $wpdb->prefix . 'league';
  
  // Check if records already exist
  $existing_records = $wpdb->get_var("SELECT COUNT(*) FROM $table_name");
  if ($existing_records > 0) {
    return;
  }
  
  // Insert initial records
  $wpdb->insert($table_name, array(
    'Legion Number' => 1,
    'Score' => 0
  ));
  $wpdb->insert($table_name, array(
    'Legion Number' => 2,
    'Score' => 0
  ));
  $wpdb->insert($table_name, array(
    'Legion Number' => 3,
    'Score' => 0
  ));
  // Add more initial records as needed
  
}
register_activation_hook(__FILE__, 'insert_initial_records');

function resolute_shortcode($atts) {
  global $wpdb;
  
  // Get the table name with the correct prefix
  $table_name = $wpdb->prefix . 'league';
  $results = $wpdb->get_results("SELECT * FROM $table_name");

  if ($results) {
    $output = '<table>';
    $output .= '<tr><th>Legion Number</th><th>Score</th></tr>';

    foreach ($results as $result) {
      $output .= '<tr>';
      $output .= '<td>' . $result->{"Legion Number"} . '</td>';
      $output .= '<td>' . $result->Score . '</td>';
      $output .= '</tr>';
    }

    $output .= '</table>';

    return $output;
  } else {
    return "No records found in the league table.";
  }
}
add_shortcode('resolute', 'resolute_shortcode');

**my-webhooks.php:-
<?php
/*
Plugin Name: My Webhooks
Description: Custom plugin to handle incoming webhooks from Mobilephones. 
Requisites: "WP REST API" plugin and "League Table Grid" plugin.
Version: 0.0.9
Delicensed: CC0 by Salman SHUAIB.
*/

function resolute($phNum) {
    $digits = str_split($phNum);
    while (count($digits) > 1) {
        $digits = str_split(array_sum($digits));
    }
    return intval($digits[0]);
}

// Webhook handler function
function handle_webhook_request(WP_REST_Request $request) {
    // Extract the necessary information from the request
    $headers = $request->get_headers();
    $request_body = $request->get_body();
    $content_type = $headers['Content-Type'];

    // Process the request data as needed
    $occurred_at = $headers['OccurredAt'];
    $from_number = $headers['FromNumber'];
    $text = '';

    // Handle plain text content
    if ($content_type === 'text/plain') {
        $text = $request_body;
    }
    // Handle JSON content
    elseif ($content_type === 'application/json') {
        $json_data = json_decode($request_body, true);
        if ($json_data !== null) {
            $text = isset($json_data['text']) ? $json_data['text'] : '';
            $from_number = isset($json_data['FromNumber']) ? $json_data['FromNumber'] : '';
        }
    }

    // Perform actions based on the webhook data
    // Create a new post with the received data
    $post_data = array(
        'post_title'   => 'Legion Number: ' . resolute($from_number),
        'post_content' => $text,
        'post_status'  => 'publish',
        'post_author'  => 1, // Change this to the desired author ID
    );

    $post_id = wp_insert_post($post_data);

    // Send a response if necessary
    if ($post_id) {
        // Post created successfully
        return new WP_REST_Response('Post created', 200);
    } else {
        // Error occurred while creating the post
        return new WP_REST_Response('Error creating post', 500);
    }
}

// Register the custom webhook route
function register_custom_webhook_route() {
    register_rest_route('my-webhooks/v1', '/webhook/text', array(
        'methods' => 'POST',
        'callback' => 'handle_webhook_request',
    ));
}
add_action('rest_api_init', 'register_custom_webhook_route');