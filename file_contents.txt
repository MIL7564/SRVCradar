***Codebase:

**homepage-decor.php:-
<?php
/*
Plugin Name: Homepage Decor
Description: Customizing WordPress Homepage for FE.
Version: 1.0.1
Declicensed: CC0
*/

if ( ! function_exists( 'homepage_decor_enqueue_styles' ) ) {
    // Alternate colors for WordPress Posts
    function homepage_decor_enqueue_styles() {
        wp_enqueue_style( 'homepage-decor', plugins_url( 'homepage-decor.css', __FILE__ ) );
    }
    add_action( 'wp_enqueue_scripts', 'homepage_decor_enqueue_styles' );
}

define( "PATH", $_SERVER['DOCUMENT_ROOT']);
require PATH . "/wp-content/plugins/my-webhooks/my-webhooks.php";

// Calculate $catsNdogs using cooperative function
if ( ! function_exists( 'cooperative' ) ) {
    function cooperative() {
        global $wpdb, $post;

        // Using $wpdb to fetch the legion_number from the fgp_posts table
        $query = "SELECT legion_number FROM {$wpdb->prefix}posts WHERE ID = %d";
        $legion_num = $wpdb->get_var($wpdb->prepare($query, $post->ID));

        // If legion_number is empty, set to default '9'
        if (empty($legion_num)) {
            $legion_num = '9';
        }

        $catsNdogs = $legion_num . 'Legion'. ' '. 'USA'; 
        return $catsNdogs;
    }
}



// Include template-tags.php
require_once(get_template_directory() . '/inc/template-tags.php');

// Pass $catsNdogs to template-tags.php
add_filter('custom_cats_ndogs', 'cooperative');
?>

**league-table-grid.php:-
<?php
/*
Plugin Name: League Table Grid
Description: Plugin to display the league table in a grid - solves freeridership.
Version: 0.0.9
Delicensed: Creative Commons Zero v1.0 Universal by Salman SHUAIB.
*/


function insert_initial_records() {
  global $wpdb;
  
  // Retrieve the database name from the WordPress configuration file
  $database_name = $wpdb->dbname;
  
  // Get the table name with the correct prefix
  $table_name = $wpdb->prefix . 'league';
  
  // Check if records already exist
  $existing_records = $wpdb->get_var("SELECT COUNT(*) FROM $table_name");
  if ($existing_records > 0) {
    return;
  }
  
  // Insert initial records
  $wpdb->insert($table_name, array(
    'Legion Number' => 1,
    'Score' => 0
  ));
  $wpdb->insert($table_name, array(
    'Legion Number' => 2,
    'Score' => 0
  ));
  $wpdb->insert($table_name, array(
    'Legion Number' => 3,
    'Score' => 0
  ));
  // Add more initial records as needed
  
}
register_activation_hook(__FILE__, 'insert_initial_records');

function resolute_shortcode($atts) {
  global $wpdb;
  
  // Get the table name with the correct prefix
  $table_name = $wpdb->prefix . 'league';
  $results = $wpdb->get_results("SELECT * FROM $table_name");

  if ($results) {
    $output = '<table>';
    $output .= '<tr><th>Legion Number</th><th>Score</th></tr>';

    foreach ($results as $result) {
      $output .= '<tr>';
      $output .= '<td>' . $result->{"Legion Number"} . '</td>';
      $output .= '<td>' . $result->Score . '</td>';
      $output .= '</tr>';
    }

    $output .= '</table>';

    return $output;
  } else {
    return "No records found in the league table.";
  }
}
add_shortcode('resolute', 'resolute_shortcode');

**my-webhooks.php:-
<?php
/*
Plugin Name: My Webhooks
Description: Custom plugin to handle incoming webhooks from Mobilephones.
Requisites: "WP REST API" plugin and "League Table Grid" plugin.
Version: 0.0.9
Delicensed: CC0 1.0 Universal by Salman SHUAIB
*/

include 'CitiesBank.php';
$areaCodeToCity = array_flip($cityAreaCodes);  // Reverse the array for lookup

if (!function_exists('resolute')) {
    function resolute($phNum) {
        $digits = str_split($phNum);
        while (count($digits) > 1) {
            $digits = str_split(array_sum($digits));
        }
        return intval($digits[0]);
    }
}

// Webhook handler function
if (!function_exists('handle_webhook_request')) {
    function handle_webhook_request(WP_REST_Request $request) {
        global $areaCodeToCity;

        // Extract the necessary information from the request headers
        $from_number = $request->get_header('FromNumber');
        $text = $request->get_header('text');
        $TICKET = $request->get_header('DatePersonal');

        $legion_num = resolute($from_number);

        // Extract the area code from the phone number
        $areaCode = substr($from_number, 0, 3);  // Assuming the area code is the first three digits

        $baseCity = $areaCodeToCity[$areaCode] ?? "{Tag: BASECITY}";  // Check if the area code exists, else default

        update_option('legion_number', $legion_num);       
        // Perform actions based on the webhook data
        // Create a new post with the received data
        $post_data = array(
            'post_title'   => $baseCity . ' ' . $TICKET,
            'post_content' => $text,   
            'post_status'  => 'publish',
            'post_author'  => 2, 
            //'post_category' => $sub_category
        );

        $post_id = wp_insert_post($post_data);
        
        global $wpdb;    //Displays unique Legion numbers
        $wpdb->update(
            $wpdb->posts,
            array(
                'legion_number' => $legion_num  
            ),
            array('ID' => $post_id) 
        );
        
        
        // Check for duplicates and trash if necessary
        do_action('interdict_check_duplicate', $post_id, $from_number);

        // Send a response if necessary
        if ($post_id) {
            // Post created successfully
            return new WP_REST_Response('Post created', 200);
        } else {
            // Error occurred while creating the post
            return new WP_REST_Response('Error creating post', 500);
        }
    }
}

// Register the custom webhook route
function register_custom_webhook_route() {
    register_rest_route('my-webhooks/v1', '/webhook/text', array(
        'methods' => 'POST',
        'callback' => 'handle_webhook_request',
    ));
}

// Ensure the callback to register_custom_webhook_route is being run
add_action('rest_api_init', 'register_custom_webhook_route');
?>