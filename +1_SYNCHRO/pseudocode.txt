-1- I am simplifying the following gameplay (script: sentinelCOGS.dart); please make the following edits to sentinelCOGS.dart to produce a new script sentinel.dart:
+ Keep the part in  sentinelCOGS.dart where user enters his CAC (City Area Code).
+ Ask the user to enter amount donated to Homeless (ask this alongside when we ask for CAC).
+ Keep the part in  sentinelCOGS.dart where the CAC is condensed into a single digit which we call the Legion Number.
+ Erase the rest of the code in sentinelCOGS.dart.
+ For each entry of amount donated ("Act Of Kindness"), a point is earned by the user's respective Legion.
+ A scoreboard displays the current scores of each Legion.
+ Winning Legion every WEEK is highlighted in PINK and advised next week off from donating to those Homeless. 

-2- Write Code in Dart for Flutter with the following pseudocode (please ensure attractive graphics):
+ Ask the user to enter his/her three-character City Area Code [CAC] part of his/her telephone number.
+ Advise the user via Dart version of [resolute(phNum)] function in following SCRIPT written in JavaScript of their Legion Number based on their CAC so they can root for their team (Legion).
+ Pull information from EDGAR database (JSON formatted) with the following facts for every company:
++1 Company Name
++2 (City) Area Code of company's primary telephone number [three characters conventionally].
++3 Cost Of Goods Sold [COGS].
+ Store the above three facts in a SQLite database meant for Dart (Flutter).
+ Retrieve each company's city area code (CAC) in turn and convert it into one digit in Dart language using the [resolute(phNum)] function in following SCRIPT written in JavaScript [Assignment Management System hash function].
++ Store the Resolute (the singularized representation of CAC) for each company as a fourth column for each entry in the SQLite database. The Resolute for a Company is its Legion Number.
++ Sum the COGS for all companies in each Legion. Display the RANKINGS for each Legion in a table: The leading Legions are the ones that have spent the most into the economy (as Cost Of Goods Sold).

+++ SCRIPT:
/*dart
This code snippet provides a basic implementation that you can further enhance and adapt to your specific requirements. It includes functions for prompting the user for input, retrieving 
company data from the EDGAR database, and storing and querying the data in a SQLite database. The Resolute value is calculated using the provided `resolute` function, and the rankings 
based on COGS are displayed. 

Remember to replace the placeholder functions (`promptForCAC` and `retrieveCompanyDataFromEDGAR`) with your actual implementation for user input and 
data retrieval.

Note: This code assumes you have the necessary dependencies (`sqflite` and `path`) added to your Flutter project. You can add them to your `pubspec.yaml` file and 
run `flutter pub get` to download the dependencies.
*/
//v0.0.8
function onOpen() {
  setTrigger();
  autoexecute(); 
  updateSheet();  // Call updateSheet() when the spreadsheet is opened 
}

function autoexecute() {
  // The code to execute every 1 minutes goes here
  updateSheet();
  
  // Call the sort function to sort the "messages" sheet
  sortSheet();

  //add a cache-control header to your HTTP responses that instructs the client to not cache responses, and instead request fresh content from the server every time.
  doGet()
}  

function updateSheet() {
  var legionPenalties = Array(9).fill(0);
  var spreadsheetName = "9LEGIONS"; // Change to the name of your spreadsheet
  var messagesSheetName = "messages"; // Change to the name of your sheet
  var resultsSheetName = "results"; // Change to the name of your results sheet
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var messagesSheet = spreadsheet.getSheetByName(messagesSheetName);
  var range = messagesSheet.getDataRange().getValues();
  var firstRow = messagesSheet.getRange(1, 1, 1, 2).getValues();

  // Set the column labels for the messages sheet if it's empty
  if (firstRow[0][0] == "" && firstRow[0][1] == "") {
  messagesSheet.getRange("A1").setValue("DATE").setFontWeight('bold').setHorizontalAlignment("left");
  messagesSheet.getRange("B1").setValue("PHONE").setFontWeight('bold').setHorizontalAlignment("left");
  messagesSheet.getRange("C1").setValue("MESSAGE").setFontWeight('bold').setHorizontalAlignment("left");

  // set column A width to 200 Pixels
  messagesSheet.setColumnWidth(1, 200);
  }
  
  // Clear the sheet if there are 14 or more entries (except the first row)
  if (range.length >= 13) {
  messagesSheet.getRange(2, 1, messagesSheet.getLastRow()-1, messagesSheet.getLastColumn()).clearContent();
  messagesSheet.getRange(1, 1, 1, 2).setFontWeight('bold').setHorizontalAlignment("left");
  messagesSheet.setColumnWidth(1, 200); 
  } 


  // Set the column labels for the "results" sheet
  var resultsSheet = spreadsheet.getSheetByName(resultsSheetName);
  resultsSheet.getRange("A1").setValue("LEGION").setFontWeight('bold');
  resultsSheet.getRange("B1").setValue("PENALTY").setFontWeight('bold');
  // Set horizontal alignment for column A and B
  resultsSheet.getRange("A1:B1").setHorizontalAlignment("center");

  // Check if messages sheet is empty
  if (range.length > 1) {
    
  for (var i = 1; i < range.length; i++) {
    if (range[i][0].length > 0) {
      var phone = range[i][1];
      var digit = resolute(phone); // pass the phone number to the resolute function
      legionPenalties[digit - 1]++;
    }
  } 


  }

  // Set legion titles and penalties in the results sheet
  for (var i = 0; i < 9; i++) {
    var legionTitle = "Legion " + (i+1);
    resultsSheet.getRange(i+2, 1).setValue(legionTitle);
    resultsSheet.getRange(i+2, 2).setValue(legionPenalties[i]);
  }

  // Determine the highest penalty and set the background color of the corresponding cell(s) to Red
  var maxPenalty = Math.max(...legionPenalties);
  
  // Clear the background color of all cells in the results sheet excepting the first row
  resultsSheet.getRange(2, 1, resultsSheet.getLastRow()-1, resultsSheet.getLastColumn()).clearFormat();
  
  for (var i = 0; i < 9; i++) {
    if (legionPenalties[i] === maxPenalty) {
      resultsSheet.getRange(i+2, 1, 1, 2).setBackground("#EA4335");
    }
  }
}


function resolute(phNum) {
  var digits = phNum.toString().split("").map(Number);
  var sum = 0;
  
  for (var i = 1; i <= 3; i++) {
    sum += digits[i];
  }

  while (sum > 9) {
    digits = sum.toString().split("").map(Number);
    sum = digits.reduce(function(a, b) { return a + b; });
  }
  
  return sum;
}


function sortSheet() {
  var spreadsheetName = "9LEGIONS"; // Change to the name of your spreadsheet
  var sheetName = "messages"; // Change to the name of your sheet
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheetByName(sheetName);
  var numRows = sheet.getLastRow() - 1;
  
  if (numRows > 0) {
    var range = sheet.getRange(2, 1, numRows, sheet.getLastColumn());
    var values = range.getValues();

    // Sort the range in descending order based on the "DATE" column
    values.sort(function(a, b) {
      var dateA = parseDate(a[0]);
      var dateB = parseDate(b[0]);
      return dateB - dateA;
    });

    // Update the sorted range on the sheet
    range.setValues(values);
  }
}

function parseDate(dateStr) {
  var dateParts = dateStr.split(" ");
  var month = parseMonth(dateParts[0]);
  var day = parseInt(dateParts[1].replace(",", ""));
  var year = parseInt(dateParts[2]);
  var timeParts = dateParts[4].split(":");
  var hour = parseInt(timeParts[0]);
  var minute = parseInt(timeParts[1]);
  if (dateParts[5] == "PM") {
    hour += 12;
  }
  var dateObj = new Date(year, month, day, hour, minute);
  return dateObj;
}

function parseMonth(monthStr) {
  var monthNames = [    "January", "February", "March", "April", "May", "June",    "July", "August", "September", "October", "November", "December"  ];
  return monthNames.indexOf(monthStr);
}


function setTrigger() {
  // Get all existing triggers in the project
  var triggers = ScriptApp.getProjectTriggers();

  // Check if a trigger already exists for the autoexecute function
  var triggerExists = false;
  for (var i = 0; i < triggers.length; i++) {
    if (triggers[i].getHandlerFunction() == 'autoexecute') {
      triggerExists = true;
      break;
    }
  }

  // If a trigger doesn't exist create a new one that runs the autoexecute function every 1 minutes
  if (!triggerExists) {
    ScriptApp.newTrigger('autoexecute')
             .timeBased()
             .everySeconds(60)
             .create();
  }
}

function doGet() {
  var output = HtmlService.createHtmlOutputFromFile('index')
      .setTitle('Sentinel')
      .setSandboxMode(HtmlService.SandboxMode.IFRAME);
  return output;
}

-2- ************Lets go step by step, ChatGPT. Let me provide you what the SEC website states about its API process. I actually need "code" in Dart, dear ChatGPT, 
for querying the following information from EDGAR: [++1 Company Name  ++2 City Area Code of company's telephone number  and ++3 Cost Of Goods Sold [COGS]; from 10-Ks and 10-Qs beginning 
January 1, 2023AD for each company in EDGAR database.



EXISTING CODE:
// Function to retrieve company data from EDGAR database
List<Map<String, dynamic>> retrieveCompanyDataFromEDGAR() {
  // Use your preferred method or API to retrieve company data from EDGAR database
  // and return the data as a List of Maps, where each Map represents a company and contains the required facts
}



**CAUTION: Current guidelines limit each user to a total of no more than 10 requests per second, regardless of the number of machines used to submit requests. 
To ensure that SEC.gov remains available to all users, we reserve the right to block IP addresses that submit excessive requests.

Current guidelines limit each user to a total of no more than 10 requests per second, regardless of the number of machines used to submit requests. 
To ensure that SEC.gov remains available to all users, we reserve the right to block IP addresses that submit excessive requests.
"data.sec.gov" was created to host RESTful data Application Programming Interfaces (APIs) delivering JSON-formatted data to external customers and to web pages on SEC.gov. These APIs do not require any authentication or API keys to access.

Currently included in the APIs are the submissions history by filer and the XBRL data from financial statements (forms 10-Q, 10-K,8-K, 20-F, 40-F, 6-K, and their variants).

The JSON structures are updated throughout the day, in real time, as submissions are disseminated.

In addition, a bulk ZIP file is available to download all the JSON structures for an API. This ZIP file is updated and republished nightly at approximately 3:00 a.m. ET.

data.sec.gov/submissions/
Each entity’s current filing history is available at the following URL:

https://data.sec.gov/submissions/CIK##########.json
Where the ########## is the entity’s 10-digit Central Index Key (CIK), including leading zeros.

This JSON data structure contains metadata such as current name, former name, and stock exchanges and ticker symbols of publicly-traded companies. The object’s property path contains at least one year’s of filing or to 1,000 (whichever is more) of the most recent filings in a compact columnar data array. If the entity has additional filings, files will contain an array of additional JSON files and the date range for the filings each one contains.

XBRL data APIs
Extensible Business Markup Language (XBRL) is an XML-based format for reporting financial statements used by the SEC and financial regulatory agencies across the world. XBRL, in a separate XML file or more recently embedded in quarterly and annual HTML reports as inline XBRL, was first required by the SEC in 2009. XBRL facts must be associated for a standard US-GAAP or IFRS taxonomy. Companies can also extend standard taxonomies with their own custom taxonomies.

The following XBRL APIs aggregate facts from across submissions that

Use a non-custom taxonomy (e.g. us-gaap, ifrs-full, dei, or srt)
Apply to the entire filing entity
This ensures that facts have a consistent context and meaning across companies and between filings and are comparable between companies and across time.

data.sec.gov/api/xbrl/companyconcept/
The company-concept API returns all the XBRL disclosures from a single company (CIK) and concept (a taxonomy and tag) into a single JSON file, with a separate array of facts for each units on measure that the company has chosen to disclose (e.g. net profits reported in U.S. dollars and in Canadian dollars).

https://data.sec.gov/api/xbrl/companyconcept/CIK##########/us-gaap/AccountsPayableCurrent.json
data.sec.gov/api/xbrl/companyfacts/
This API returns all the company concepts data for a company into a single API call:

https://data.sec.gov/api/xbrl/companyfacts/CIK##########.json
data.sec.gov/api/xbrl/frames/
The xbrl/frames API aggregates one fact for each reporting entity that is last filed that most closely fits the calendrical period requested. This API supports for annual, quarterly and instantaneous data:

https://data.sec.gov/api/xbrl/frames/us-gaap/AccountsPayableCurrent/USD/CY2019Q1I.json
Where the units of measure specified in the XBRL contains a numerator and a denominator, these are separated by “-per-” such as “USD-per-shares”. Note that the default unit in XBRL is “pure”.

The period format is CY#### for annual data (duration 365 days +/- 30 days), CY####Q# for quarterly data (duration 91 days +/- 30 days), and CY####Q#I for instantaneous data. Because company financial calendars can start and end on any month or day and even change in length from quarter to quarter to according to the day of the week, the frame data is assembled by the dates that best align with a calendar quarter or year. Data users should be mindful different reporting start and end dates for facts contained in a frame.

CORS
data.sec.gov does not support Cross Origin Resource Scripting (CORS). Automated access must comply with SEC.gov’s Privacy and Security Policy, as described in the   Developer FAQ.

Bulk data
The most efficient means to fetch large amounts of API data is the bulk archive ZIP files, which are recompiled nightly.

The companyfacts.zip file contains all the data from the XBRL Frame API and the XBRL Company Facts API
           https://www.sec.gov/Archives/edgar/daily-index/xbrl/companyfacts.zip

The submission.zip file contains the public EDGAR filing history for all filers from the Submissions API
           https://www.sec.gov/Archives/edgar/daily-index/bulkdata/submissions.zip 

Update schedule
The APIs are updated in real-time as filings are disseminated. The submissions API is updated with a typical processing delay of less than a second; the xbrl APIs are updated with a typical processing delay of under a minute. However these processing delays may be longer during peak filing times.